def generate_key_matrix(key):
    key = key.replace(" ", "").upper()
    key_len = len(key)
    matrix_dim = int(key_len ** 0.5)
    if matrix_dim ** 2 != key_len:
        raise ValueError("Key length is not a perfect square")

    key_matrix = [[0] * matrix_dim for _ in range(matrix_dim)]
    for i in range(matrix_dim):
        for j in range(matrix_dim):
            key_matrix[i][j] = ord(key[i * matrix_dim + j]) - 65

    return key_matrix

def determinant(matrix):
    if len(matrix) == 1:
        return matrix[0][0]
    elif len(matrix) == 2:
        return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]
    else:
        det = 0
        for i in range(len(matrix)):
            det += ((-1) ** i) * matrix[0][i] * determinant(
                [row[:i] + row[i + 1:] for row in matrix[1:]]
            )
        return det

def mod_inverse(num, mod):
    for i in range(1, mod):
        if (num * i) % mod == 1:
            return i
    raise ValueError(f"No modular inverse for {num} mod {mod}")

def inverse_matrix(matrix, mod):
    det = determinant(matrix)
    det_inv = mod_inverse(det, mod)

    if len(matrix) == 1:
        return [[det_inv % mod]]
    adjugate = []
    for i in range(len(matrix)):
        adj_row = []
        for j in range(len(matrix)):
            minor = [row[:j] + row[j + 1:] for row in matrix[:i] + matrix[i + 1:]]
            adj_row.append(((-1) ** (i + j)) * determinant(minor))
        adjugate.append(adj_row)
    inverse = [[(num * det_inv) % mod for num in row] for row in adjugate]
    return inverse

def encrypt(plaintext, key):
    plaintext = plaintext.replace(" ", "").upper()
    plaintext_len = len(plaintext)
    key_matrix = generate_key_matrix(key)

    matrix_dim = len(key_matrix)
    if plaintext_len % matrix_dim != 0:
        padding = matrix_dim - (plaintext_len % matrix_dim)
        plaintext += "X" * padding
        plaintext_len += padding

    ciphertext = ""
    for i in range(0, plaintext_len, matrix_dim):
        block = [ord(char) - 65 for char in plaintext[i:i+matrix_dim]]
        encrypted_block = [sum(key_matrix[i][j] * block[j] for j in range(matrix_dim)) % 26 for i in range(matrix_dim)]
        ciphertext += ''.join([chr(num + 65) for num in encrypted_block])

    return ciphertext

def decrypt(ciphertext, key):
    ciphertext = ciphertext.replace(" ", "").upper()
    ciphertext_len = len(ciphertext)
    key_matrix = generate_key_matrix(key)

    matrix_dim = len(key_matrix)
    if ciphertext_len % matrix_dim != 0:
        raise ValueError("Ciphertext length is not divisible by key matrix dimension")

    plaintext = ""
    inv_key_matrix = inverse_matrix(key_matrix, 26)
    for i in range(0, ciphertext_len, matrix_dim):
        block = [ord(char) - 65 for char in ciphertext[i:i+matrix_dim]]
        decrypted_block = [sum(inv_key_matrix[i][j] * block[j] for j in range(matrix_dim)) % 26 for i in range(matrix_dim)]
        plaintext += ''.join([chr(num + 65) for num in decrypted_block])

    return plaintext

# Example usage:
key = "2"
plaintext = "HELLO"
ciphertext = encrypt(plaintext, key)
print("Encrypted:", ciphertext)
decrypted_text = decrypt(ciphertext, key)
print("Decrypted:", decrypted_text)
